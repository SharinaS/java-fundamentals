/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package basiclibrary;


import java.util.*;

public class Library {

    public boolean someLibraryMethod() {
        return true;
    }

    // ====Create an array from the values rolled from a six-sided dice, rolled n times. ====
    public static int[] roll(int n){
        Random rand = new Random();
        int max = 6;
        int min = 0;
        int[] diceRolls = new int[n];

        for ( int i = 0; i < n; i++){
              int randyNum = rand.nextInt((max - min) + 1);
              diceRolls[i] = randyNum;
        }
        //System.out.println(Arrays.toString(diceRolls));
        return diceRolls;
    }

    // ==== check for duplicates within an array ====
    public static boolean duplicates(int[] checker){
        for ( int i = 0; i < checker.length; i++){
            for (int j = i+1; j < checker.length; j++){
                if(checker[i] == checker[j]){
                    return true;
                }
            }
        }
        return false;
    }

    // ==== get the average value for the contents of an array ====
    public static int averages(int[] arr){
        int summed = 0;
        int arrLength = arr.length;
        for (int i = 0; i < arr.length; i++){
            summed += arr[i];
        }
        return summed/arrLength;
    }

    // ==== Array of Arrays - get the array with the lowest average ====
    /* Help received from Sarah Fisher, specifically in using averages method within following method,
    and the use of index to point to appropriate array.*/
    public static int[] nestedAverages(int[][] arrOfArrays){
        int indexOfArraywithLowestAverage = 0;
        // call averages method to calculate average on each subarray.
        int lowestAverage = averages(arrOfArrays[indexOfArraywithLowestAverage]);

        for(int i = 0; i < arrOfArrays.length; i++){

            int currAverage = averages(arrOfArrays[i]);
            if (currAverage < lowestAverage) {
                lowestAverage = currAverage;
                indexOfArraywithLowestAverage = i;
                }
            }
        return arrOfArrays[indexOfArraywithLowestAverage];
    }

    // ==== The start of a second option for nestedAverages method
//    public static int[] nestedAveragesWithForEach(int[][] arrOfArrays){
//        double lowestAverage = averages(arrOfArrays[0]);
//        for(int[] week : arrOfArrays){
//            int average = 0;
//            for(int day : week){
//                // write code here that uses the daily temp referencing 'day'
//            }
//            average = average / 7;
//            if(average < runningAverage) running Average = average;
//        }
//    }


    // ==== October weather data ====
    // Resources: https://stackoverflow.com/questions/21674457/create-an-empty-hashset
    // Resources: https://www.geeksforgeeks.org/hashset-contains-method-in-java/
    // Resources: https://stackoverflow.com/questions/15730134/java-opposite-of-contains-does-not-contain
    public static String octoberWeather (int[][] weeklyMonthTempsOct){
        int min = weeklyMonthTempsOct[0][0];
        int max = weeklyMonthTempsOct[0][0];
        String weatherTempsStr = "";
        HashSet<Integer> uniqueTempsSet = new HashSet<Integer>();

        for (int[] week : weeklyMonthTempsOct){
            for(int daytemp : week) {
                if(daytemp < min) {
                    min = daytemp;
                }
                if(daytemp > max) {
                    max = daytemp;
                }
                uniqueTempsSet.add(daytemp);
                } // closes inner  for loop
            } // closes outer for loop
            weatherTempsStr += "High: " + max + "\n";
            weatherTempsStr += "Low: " + min + "\n";
            // check hashset for values between the min and max values and if they do not exist, print out temps
            // not seen.
            for(int i = min; i < max; i++){
                if(!uniqueTempsSet.contains(i)){
                    weatherTempsStr += ("Never saw temperature: " + i + "\n");

                }
            }
        return weatherTempsStr;
    }

    // Resource: https://beginnersbook.com/2013/12/how-to-loop-arraylist-in-java/
    // Resource: https://www.geeksforgeeks.org/collections-max-method-in-java-with-examples/
    public static String tallyingVotes(List<String> votes){
        HashMap<String, Integer> nameCounts = new HashMap<>();
        String highestVotes = "";
        for (String name : votes) {
            // if name not in hashmap, put it in there with a count of 1
            if (!nameCounts.containsKey(name)) {
                nameCounts.put(name, 1);
            } else {
                // Each time we find a name, increment its count by 1
//                int numVotesByName = nameCounts.get(name);
//                numVotesByName++;
//                nameCounts.put(name, numVotesByName);

                nameCounts.put(name, nameCounts.get(name)+1); // shorter way than above
            }

            // find highest number of occurrances of name by iterating through HashMap
            int max = 0;
            for (String person : nameCounts.keySet()){
                //System.out.println(name + nameCounts.get(person));
                if (nameCounts.get(person) > max) {
                    max = nameCounts.get(person);
                    highestVotes = name;
                }
            }
        }
        return highestVotes;
    }
}
