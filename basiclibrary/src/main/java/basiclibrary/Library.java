/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package basiclibrary;


import java.util.Random;
import java.util.Arrays;

public class Library {

    public boolean someLibraryMethod() {
        return true;
    }

    // ====Create an array from the values rolled from a six-sided dice, rolled n times. ====
    public static int[] roll(int n){
        Random rand = new Random();
        int max = 6;
        int min = 0;
        int[] diceRolls = new int[n];

        for ( int i = 0; i < n; i++){
              int randyNum = rand.nextInt((max - min) + 1);
              diceRolls[i] = randyNum;
        }
        //System.out.println(Arrays.toString(diceRolls));
        return diceRolls;
    }

    // ==== check for duplicates within an array ====
    public static boolean duplicates(int[] checker){
        for ( int i = 0; i < checker.length; i++){
            for (int j = i+1; j < checker.length; j++){
                if(checker[i] == checker[j]){
                    return true;
                }
            }
        }
        return false;
    }

    // ==== get the average value for the contents of an array ====
    public static int averages(int[] arr){
        int summed = 0;
        int arrLength = arr.length;
        for (int i = 0; i < arr.length; i++){
            summed += arr[i];
        }
        return summed/arrLength;
    }

    // ==== Array of Arrays - get the array with the lowest average ====
    /* Help received from Sarah Fisher, specifically in using averages method within following method,
    and the use of index to point to appropriate array.*/
    public static int[] nestedAverages(int[][] arrOfArrays){
        int indexOfArraywithLowestAverage = 0;
        // call averages method to calculate average on each subarray.
        int lowestAverage = averages(arrOfArrays[indexOfArraywithLowestAverage]);

        for(int i = 0; i < arrOfArrays.length; i++){

            int currAverage = averages(arrOfArrays[i]);
            if (currAverage < lowestAverage) {
                lowestAverage = currAverage;
                indexOfArraywithLowestAverage = i;
                }
            }
        return arrOfArrays[indexOfArraywithLowestAverage];
    }

    // ==== The start of a second option for this method
//    public static int[] nestedAveragesWithForEach(int[][] arrOfArrays){
//        double lowestAverage = averages(arrOfArrays[0]);
//        for(int[] week : arrOfArrays){
//            int average = 0;
//            for(int day : week){
//                // write code here that uses the daily temp referencing 'day'
//            }
//            average = average / 7;
//            if(average < runningAverage) running Average = average;
//        }
//    }
}
